 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _bPulseWidth::
 0000 00                .byte 0
 0001                   .dbfile C:\DOCUME~1\vwadhwa\Desktop\Lab4C\Lab4C\main.c
 0001                   .dbsym e bPulseWidth _bPulseWidth c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\DOCUME~1\vwadhwa\Desktop\Lab4C\Lab4C\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\DOCUME~1\vwadhwa\Desktop\Lab4C\Lab4C\main.c
 0000           _increasing::
 0000 01                .byte 1
 0001                   .dbsym e increasing _increasing c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\DOCUME~1\vwadhwa\Desktop\Lab4C\Lab4C\main.c
                        .area text(rom, con, rel)
 0000                   .dbfile C:\DOCUME~1\vwadhwa\Desktop\Lab4C\Lab4C\main.c
 0000                   .dbfunc e main _main fV
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3802              add SP,2
 0004                   .dbline 12
 0004           ; //----------------------------------------------------------------------------
 0004           ; // C main line
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; 
 0004           ; extern char bPulseWidth = 0;
 0004           ; extern char increasing = 1;
 0004           ; 
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 17
 0004           ; 
 0004           ; //set up rising edge interrupts on P0[0]
 0004           ; //PRT0IC0 bit 0 = 0
 0004           ; //PRT0IC1 bit 0 = 1
 0004           ; PRT0IE |= 0b00000001; //Enable interrupts for P0[0]
 0004 430101            or REG[0x1],1
 0007                   .dbline 18
 0007           ; PRT0IC0 &= ~0b00000001;
 0007 7110              or F,0x10  ; iopage = 1
 0009 4102FE            and REG[0x2],-2
 000C                   .dbline 19
 000C           ; PRT0IC1 |= 0b00000001;
 000C 430301            or REG[0x3],1
 000F                   .dbline 23
 000F           ; 
 000F           ; //Set up its drive mode to
 000F           ;   //PRT0DM0,1,2 
 000F           ;   PRT0DM0 &= ~0b00000001;
 000F 4100FE            and REG[0],-2
 0012                   .dbline 24
 0012           ;   PRT0DM1 &= ~0b00000001;
 0012 4101FE            and REG[0x1],-2
 0015                   .dbline 25
 0015           ;   PRT0DM2 &= ~0b00000001;
 0015 70CF              and F,0xCF      ; iopage = 0
 0017 4103FE            and REG[0x3],-2
 001A                   .dbline 27
 001A           ; 
 001A           ; TX8_Start(0);
 001A 10                push X
 001B 5000              mov A,0
 001D 7C0000            xcall _TX8_Start
 0020                   .dbline 28
 0020           ; TX8_EnableInt();
 0020 7C0000            xcall _TX8_EnableInt
 0023                   .dbline 29
 0023           ; LCD_Start();
 0023 7C0000            xcall _LCD_Start
 0026                   .dbline 30
 0026           ; LCD_Init();
 0026 7C0000            xcall _LCD_Init
 0029                   .dbline 32
 0029           ; //PWM8_Start();
 0029           ; BaudClock_Start();
 0029 7C0000            xcall _BaudClock_Start
 002C 20                pop X
 002D                   .dbline 33
 002D           ; INT_MSK0 |= 0b00100000;
 002D 43E020            or REG[0xe0],32
 0030                   .dbline 34
 0030           ; M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
 0030 7101                      or  F, 01h
 0032           
 0032                   .dbline 36
 0032           ;       // Insert your main routine code here.
 0032           ;       LCD_InitBG(LCD_SOLID_BG);
 0032 10                push X
 0033 5000              mov A,0
 0035 7C0000            xcall _LCD_InitBG
 0038 20                pop X
 0039 8125              xjmp L3
 003B           L2:
 003B                   .dbline 39
 003B           ;       
 003B           ;       while(1)
 003B           ;       {
 003B                   .dbline 41
 003B           ;               //PWM8_WritePulseWidth(bPulseWidth);
 003B           ;               LCD_DrawBG(0, 0, 16,(bPulseWidth/255.0)*80);
 003B 62D000            mov REG[0xd0],>_bPulseWidth
 003E 5100              mov A,[_bPulseWidth]
 0040 62D000            mov REG[0xd0],>__r0
 0043 5300              mov [__r3],A
 0045 550000            mov [__r2],0
 0048 470080            tst [__r2],-128
 004B A009              jz X1
 004D 5500FF            mov [__r1],-1
 0050 5500FF            mov [__r0],-1
 0053 800A              jmp X2
 0055           X1:
 0055 62D000            mov REG[0xd0],>__r0
 0058 550000            mov [__r1],0
 005B 550000            mov [__r0],0
 005E           X2:
 005E 62D000            mov REG[0xd0],>__r0
 0061 5100              mov A,[__r0]
 0063 08                push A
 0064 5100              mov A,[__r1]
 0066 08                push A
 0067 5100              mov A,[__r2]
 0069 08                push A
 006A 5100              mov A,[__r3]
 006C 08                push A
 006D 7C0000            xcall __long2fp
 0070 18                pop A
 0071 5300              mov [__r3],A
 0073 18                pop A
 0074 5300              mov [__r2],A
 0076 18                pop A
 0077 5300              mov [__r1],A
 0079 18                pop A
 007A 5300              mov [__r0],A
 007C 5043              mov A,67
 007E 08                push A
 007F 507F              mov A,127
 0081 08                push A
 0082 5000              mov A,0
 0084 08                push A
 0085 08                push A
 0086 5100              mov A,[__r0]
 0088 08                push A
 0089 5100              mov A,[__r1]
 008B 08                push A
 008C 5100              mov A,[__r2]
 008E 08                push A
 008F 5100              mov A,[__r3]
 0091 08                push A
 0092 7C0000            xcall __fpdiv
 0095 18                pop A
 0096 5300              mov [__r3],A
 0098 18                pop A
 0099 5300              mov [__r2],A
 009B 18                pop A
 009C 5300              mov [__r1],A
 009E 18                pop A
 009F 38FC              add SP,-4
 00A1 08                push A
 00A2 5100              mov A,[__r1]
 00A4 08                push A
 00A5 5100              mov A,[__r2]
 00A7 08                push A
 00A8 5100              mov A,[__r3]
 00AA 08                push A
 00AB 5042              mov A,66
 00AD 08                push A
 00AE 50A0              mov A,-96
 00B0 08                push A
 00B1 5000              mov A,0
 00B3 08                push A
 00B4 08                push A
 00B5 7C0000            xcall __fpmul
 00B8 18                pop A
 00B9 5300              mov [__r3],A
 00BB 18                pop A
 00BC 5300              mov [__r2],A
 00BE 18                pop A
 00BF 5300              mov [__r1],A
 00C1 18                pop A
 00C2 5300              mov [__r0],A
 00C4 38FC              add SP,-4
 00C6 5047              mov A,71
 00C8 08                push A
 00C9 5000              mov A,0
 00CB 08                push A
 00CC 08                push A
 00CD 08                push A
 00CE 5100              mov A,[__r0]
 00D0 08                push A
 00D1 5100              mov A,[__r1]
 00D3 08                push A
 00D4 5100              mov A,[__r2]
 00D6 08                push A
 00D7 5100              mov A,[__r3]
 00D9 08                push A
 00DA 7C0000            xcall __fpcmp
 00DD 38F8              add SP,-8
 00DF 39FF              cmp A,-1
 00E1 A047              jz L6
 00E3 5047              mov A,71
 00E5 08                push A
 00E6 5000              mov A,0
 00E8 08                push A
 00E9 08                push A
 00EA 08                push A
 00EB 5100              mov A,[__r0]
 00ED 08                push A
 00EE 5100              mov A,[__r1]
 00F0 08                push A
 00F1 5100              mov A,[__r2]
 00F3 08                push A
 00F4 5100              mov A,[__r3]
 00F6 08                push A
 00F7 7C0000            xcall __fpsub
 00FA 18                pop A
 00FB 5300              mov [__r7],A
 00FD 18                pop A
 00FE 5300              mov [__r6],A
 0100 18                pop A
 0101 5300              mov [__r5],A
 0103 18                pop A
 0104 38FC              add SP,-4
 0106 08                push A
 0107 5100              mov A,[__r5]
 0109 08                push A
 010A 5100              mov A,[__r6]
 010C 08                push A
 010D 5100              mov A,[__r7]
 010F 08                push A
 0110 7C0000            xcall __fp2long
 0113 18                pop A
 0114 5300              mov [__r5],A
 0116 18                pop A
 0117 5300              mov [__r4],A
 0119 38FE              add SP,-2
 011B 5100              mov A,[__r5]
 011D 0100              add A,0
 011F 5401              mov [X+1],A
 0121 5100              mov A,[__r4]
 0123 0980              adc A,-128
 0125 5400              mov [X+0],A
 0127 8023              xjmp L7
 0129           L6:
 0129 62D000            mov REG[0xd0],>__r0
 012C 5100              mov A,[__r0]
 012E 08                push A
 012F 5100              mov A,[__r1]
 0131 08                push A
 0132 5100              mov A,[__r2]
 0134 08                push A
 0135 5100              mov A,[__r3]
 0137 08                push A
 0138 7C0000            xcall __fp2long
 013B 18                pop A
 013C 5300              mov [__r1],A
 013E 18                pop A
 013F 5300              mov [__r0],A
 0141 38FE              add SP,-2
 0143 5100              mov A,[__r1]
 0145 5401              mov [X+1],A
 0147 5100              mov A,[__r0]
 0149 5400              mov [X+0],A
 014B           L7:
 014B 62D000            mov REG[0xd0],>__r0
 014E 5201              mov A,[X+1]
 0150 10                push X
 0151 08                push A
 0152 5010              mov A,16
 0154 08                push A
 0155 5000              mov A,0
 0157 08                push A
 0158 08                push A
 0159 7C0000            xcall _LCD_DrawBG
 015C 38FC              add SP,-4
 015E 20                pop X
 015F                   .dbline 42
 015F           ;       }
 015F           L3:
 015F                   .dbline 38
 015F 8EDB              xjmp L2
 0161           X0:
 0161                   .dbline -2
 0161           L1:
 0161 38FE              add SP,-2
 0163 20                pop X
 0164                   .dbline 0 ; func end
 0164 8FFF              jmp .
 0166                   .dbend
 0166                   .dbfunc e GPIOInterrupt _GPIOInterrupt fV
 0166           _GPIOInterrupt::
 0166                   .dbline -1
 0166 71C0              or F,-64
 0168 08                push A
 0169 5DD0              mov A,REG[0xd0]
 016B 08                push A
 016C 5DD3              mov A,REG[0xd3]
 016E 08                push A
 016F 5DD4              mov A,REG[0xd4]
 0171 08                push A
 0172 5DD5              mov A,REG[0xd5]
 0174 08                push A
 0175 62D000            mov REG[0xd0],>__r0
 0178 5100              mov A,[__r0]
 017A 08                push A
 017B 5100              mov A,[__r1]
 017D 08                push A
 017E 5100              mov A,[__r2]
 0180 08                push A
 0181 5100              mov A,[__r3]
 0183 08                push A
 0184 5100              mov A,[__r4]
 0186 08                push A
 0187 5100              mov A,[__r5]
 0189 08                push A
 018A 5100              mov A,[__r6]
 018C 08                push A
 018D 5100              mov A,[__r7]
 018F 08                push A
 0190 5100              mov A,[__r8]
 0192 08                push A
 0193 5100              mov A,[__r9]
 0195 08                push A
 0196 5100              mov A,[__r10]
 0198 08                push A
 0199 5100              mov A,[__r11]
 019B 08                push A
 019C 5100              mov A,[__rX]
 019E 08                push A
 019F 5100              mov A,[__rY]
 01A1 08                push A
 01A2 5100              mov A,[__rZ]
 01A4 08                push A
 01A5                   .dbline 48
 01A5           ; }
 01A5           ; 
 01A5           ; #pragma interrupt_handler GPIOInterrupt
 01A5           ; 
 01A5           ; void GPIOInterrupt()
 01A5           ; {
 01A5                   .dbline 49
 01A5           ;       if(increasing ==1)
 01A5 62D000            mov REG[0xd0],>_increasing
 01A8 3C0001            cmp [_increasing],1
 01AB B01D              jnz L9
 01AD                   .dbline 50
 01AD           ;       {
 01AD                   .dbline 51
 01AD           ;               if(bPulseWidth + 5 >=255)
 01AD 62D000            mov REG[0xd0],>_bPulseWidth
 01B0 5100              mov A,[_bPulseWidth]
 01B2 0105              add A,5
 01B4 62D000            mov REG[0xd0],>__r0
 01B7 39FF              cmp A,-1
 01B9 C007              jc L11
 01BB           X4:
 01BB                   .dbline 52
 01BB           ;               {
 01BB                   .dbline 53
 01BB           ;                       increasing = 0;
 01BB 62D000            mov REG[0xd0],>_increasing
 01BE 550000            mov [_increasing],0
 01C1                   .dbline 54
 01C1           ;               }
 01C1           L11:
 01C1                   .dbline 55
 01C1           ;               bPulseWidth +=5;
 01C1 62D000            mov REG[0xd0],>_bPulseWidth
 01C4 060005            add [_bPulseWidth],5
 01C7                   .dbline 56
 01C7           ;       }
 01C7 8022              xjmp L10
 01C9           L9:
 01C9                   .dbline 58
 01C9           ;       else
 01C9           ;       {
 01C9                   .dbline 59
 01C9           ;               if(bPulseWidth - 5 <=0)
 01C9 62D000            mov REG[0xd0],>_bPulseWidth
 01CC 5100              mov A,[_bPulseWidth]
 01CE 1105              sub A,5
 01D0 62D000            mov REG[0xd0],>__r0
 01D3 5300              mov [__r0],A
 01D5 5000              mov A,0
 01D7 3A00              cmp A,[__r0]
 01D9 C007              jc L13
 01DB           X5:
 01DB                   .dbline 60
 01DB           ;               {
 01DB                   .dbline 61
 01DB           ;                       increasing = 1;
 01DB 62D000            mov REG[0xd0],>_increasing
 01DE 550001            mov [_increasing],1
 01E1                   .dbline 62
 01E1           ;               }
 01E1           L13:
 01E1                   .dbline 63
 01E1           ;               bPulseWidth -=5;
 01E1 62D000            mov REG[0xd0],>_bPulseWidth
 01E4 5100              mov A,[_bPulseWidth]
 01E6 1105              sub A,5
 01E8 5300              mov [_bPulseWidth],A
 01EA                   .dbline 64
 01EA           ;       }
 01EA           L10:
 01EA                   .dbline 65
 01EA           ;       TX8_PutSHexByte(bPulseWidth);
 01EA 10                push X
 01EB 62D000            mov REG[0xd0],>_bPulseWidth
 01EE 5100              mov A,[_bPulseWidth]
 01F0 7C0000            xcall _TX8_PutSHexByte
 01F3                   .dbline 66
 01F3           ;       TX8_PutCRLF();
 01F3 7C0000            xcall _TX8_PutCRLF
 01F6 20                pop X
 01F7                   .dbline -2
 01F7           L8:
 01F7 62D000            mov REG[0xD0],>__r0
 01FA 18                pop A
 01FB 5300              mov [__rZ],A
 01FD 18                pop A
 01FE 5300              mov [__rY],A
 0200 18                pop A
 0201 5300              mov [__rX],A
 0203 18                pop A
 0204 5300              mov [__r11],A
 0206 18                pop A
 0207 5300              mov [__r10],A
 0209 18                pop A
 020A 5300              mov [__r9],A
 020C 18                pop A
 020D 5300              mov [__r8],A
 020F 18                pop A
 0210 5300              mov [__r7],A
 0212 18                pop A
 0213 5300              mov [__r6],A
 0215 18                pop A
 0216 5300              mov [__r5],A
 0218 18                pop A
 0219 5300              mov [__r4],A
 021B 18                pop A
 021C 5300              mov [__r3],A
 021E 18                pop A
 021F 5300              mov [__r2],A
 0221 18                pop A
 0222 5300              mov [__r1],A
 0224 18                pop A
 0225 5300              mov [__r0],A
 0227 18                pop A
 0228 60D5              mov REG[213],A
 022A 18                pop A
 022B 60D4              mov REG[212],A
 022D 18                pop A
 022E 60D3              mov REG[211],A
 0230 18                pop A
 0231 60D0              mov REG[208],A
 0233 18                pop A
 0234                   .dbline 0 ; func end
 0234 7E                reti
 0235                   .dbend
