FILE: .\boot.asm                        (0001) ; Generated by PSoC Designer 5.1.1875.0
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#897 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.21
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2010. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0118)     halt                           ;Stop execution if power falls too low
                                        (0119) 
                                        (0120)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0121)     // call	void_handler
0008: 7E       RETI                     (0122)     reti
                                        (0123) 
                                        (0124)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0125)     // call	void_handler
000C: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0129)     // call	void_handler
0010: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0133)     // call	void_handler
0014: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   18h                      ;VC3 Interrupt Vector
                                        (0137)     // call	void_handler
0018: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0141)     // call	void_handler
001C: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0145)     // call	void_handler
0020: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0149)     // call	void_handler
0024: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0153)     // call	void_handler
0028: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0157)     // call	void_handler
002C: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0161)     // call	void_handler
0030: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0165)     // call	void_handler
0034: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0169)     // call	void_handler
0038: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0173)     // call	void_handler
003C: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0177)     // call	void_handler
0040: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0181)     // call	void_handler
0044: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0185)     // call	void_handler
0048: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0189)     // call	void_handler
004C: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0193)     // call	void_handler
0050: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0197)     // call	void_handler
0054: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0201)     // call	void_handler
0058: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0205)     // call	void_handler
005C: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0209)     // call	void_handler
0060: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0213)     // call	void_handler
0064: 7E       RETI                     (0214)     reti
0068: 71 10    OR    F,0x10             
                                        (0215) 
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  Start of Execution.
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0220) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0221) ;
                                        (0222) 
                                        (0223) IF	(TOOLCHAIN & HITECH)
                                        (0224)  	AREA PD_startup(CODE, REL, CON)
                                        (0225) ELSE
                                        (0226)     org 68h
                                        (0227) ENDIF
                                        (0228) __Start:
                                        (0229) 
                                        (0230)     ; initialize SMP values for voltage stabilization, if required,
                                        (0231)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0232)     ; least for now. 
                                        (0233)     ;
                                        (0234)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0235)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0236)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0237)     M8C_SetBank0
                                        (0238) 
                                        (0239)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0240)     mov   A, 20h
0074: 28       ROMX                     (0241)     romx
0075: 50 40    MOV   A,0x40             (0242)     mov   A, 40h
0077: 28       ROMX                     (0243)     romx
0078: 50 60    MOV   A,0x60             (0244)     mov   A, 60h
007A: 28       ROMX                     (0245)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0246)     ; %45%20%46%46% End workaround
                                        (0247) 
                                        (0248) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0249) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0250)     M8C_EnableWatchDog
                                        (0251) ENDIF
                                        (0252) 
                                        (0253) IF ( SELECT_32K )
                                        (0254)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0255) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0256)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0257) ENDIF
                                        (0258) 
                                        (0259)     ;---------------------------
                                        (0260)     ; Set up the Temporary stack
                                        (0261)     ;---------------------------
                                        (0262)     ; A temporary stack is set up for the SSC instructions.
                                        (0263)     ; The real stack start will be assigned later.
                                        (0264)     ;
                                        (0265) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0266)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0267)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0268) 
                                        (0269)     ;-----------------------------------------------
                                        (0270)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0271)     ;-----------------------------------------------
                                        (0272) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0273) 
                                        (0274) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0275)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0276)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0277)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0278)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0279)   IF ( AGND_BYPASS )
                                        (0280)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0281)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0282)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0283)     ; value using the proper trim values.
                                        (0284)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0285)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)   ENDIF
                                        (0287)  ENDIF
                                        (0288) ENDIF ; 5.0 V Operation
                                        (0289) 
                                        (0290) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0291)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0292)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0293)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0294)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0295)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0296)  ENDIF
                                        (0297) ENDIF ; 3.3 Volt Operation
                                        (0298) 
0087: 55 F8 00 MOV   [0xF8],0x0         (0299)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [0xF9],0x0         (0300)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0301) 
                                        (0302)     ;---------------------------------------
                                        (0303)     ; Initialize Crystal Oscillator and PLL
                                        (0304)     ;---------------------------------------
                                        (0305) 
                                        (0306) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0307)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0308)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0309)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0310)     ; the ECO to stabilize.
                                        (0311)     ;
                                        (0312)     M8C_SetBank1
                                        (0313)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0314)     M8C_SetBank0
                                        (0315)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0316)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0317)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0318) .WaitFor1s:
                                        (0319)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0320)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0321)                                           ;   since interrupts are not globally enabled
                                        (0322) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0323)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0324)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0325)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0326)     M8C_SetBank0
                                        (0327)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0328) 
                                        (0329) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0330) 
                                        (0331) IF ( PLL_MODE )
                                        (0332)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0333)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0334)     ;
                                        (0335)     M8C_SetBank1
                                        (0336)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0337)     M8C_SetBank0
                                        (0338)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0339)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0340) 
                                        (0341) .WaitFor16ms:
                                        (0342)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0343)     jz   .WaitFor16ms
                                        (0344)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0345)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0346)     M8C_SetBank0
                                        (0347) 
                                        (0348) IF      ( WAIT_FOR_32K )
                                        (0349) ELSE ; !( WAIT_FOR_32K )
                                        (0350)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0351)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0352) ENDIF ;(WAIT_FOR_32K)
                                        (0353) ENDIF ;(PLL_MODE)
                                        (0354) 
                                        (0355) 	;-------------------------------------------------------
                                        (0356)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0357)     ;-------------------------------------------------------
                                        (0358) 
                                        (0359)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0360) 
                                        (0361) IF (SYSCLK_SOURCE)
                                        (0362)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0363) ENDIF
                                        (0364)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0365) 
                                        (0366)     ;------------------------
                                        (0367)     ; Close CT leakage path.
                                        (0368)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0369)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0370)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0371)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0372)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0373) 
                                        (0374) 
                                        (0375) IF	(TOOLCHAIN & HITECH)
                                        (0376)     ;---------------------------------------------
                                        (0377)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0378)     ;---------------------------------------------
                                        (0379) 	global		__Lstackps
                                        (0380) 	mov     a,low __Lstackps
                                        (0381) 	swap    a,sp
                                        (0382) 
                                        (0383) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0384)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0385)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0386)     RAM_SETPAGE_CUR 0
                                        (0387)     RAM_SETPAGE_MVW 0
                                        (0388)     RAM_SETPAGE_MVR 0
                                        (0389)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0390)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0391)     ELSE
                                        (0392)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0393)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0394) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0395) ELSE
                                        (0396)     ;---------------------------------------------
                                        (0397)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0398)     ;---------------------------------------------
                                        (0399) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0400)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0401)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0402)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0403)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0404)     RAM_SETPAGE_CUR 0
                                        (0405)     RAM_SETPAGE_MVW 0
                                        (0406)     RAM_SETPAGE_MVR 0
                                        (0407) 
                                        (0408)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0409)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0410)   ELSE
                                        (0411)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0412)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0413) ELSE
                                        (0414)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0415)     swap  SP, A
                                        (0416) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0417) ENDIF ;	TOOLCHAIN
                                        (0418) 
                                        (0419)     ;-------------------------
                                        (0420)     ; Load Base Configuration
                                        (0421)     ;-------------------------
                                        (0422)     ; Load global parameter settings and load the user modules in the
                                        (0423)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0424)     ; to minimize start up time; (2) We may still need to play with the
                                        (0425)     ; Sleep Timer.
                                        (0426)     ;
00B7: 7C 03 1B LCALL 0x031B             (0427)     lcall LoadConfigInit
                                        (0428) 
                                        (0429)     ;-----------------------------------
                                        (0430)     ; Initialize C Run-Time Environment
                                        (0431)     ;-----------------------------------
                                        (0432) IF ( C_LANGUAGE_SUPPORT )
                                        (0433) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0434)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0435)     mov  [__r0],<__bss_start
                                        (0436) BssLoop:
                                        (0437)     cmp  [__r0],<__bss_end
                                        (0438)     jz   BssDone
                                        (0439)     mvi  [__r0],A
                                        (0440)     jmp  BssLoop
                                        (0441) BssDone:
                                        (0442)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0443)     mov  X,<__idata_start
                                        (0444)     mov  [__r0],<__data_start
                                        (0445) IDataLoop:
                                        (0446)     cmp  [__r0],<__data_end
                                        (0447)     jz   C_RTE_Done
                                        (0448)     push A
                                        (0449)     romx
                                        (0450)     mvi  [__r0],A
                                        (0451)     pop  A
                                        (0452)     inc  X
                                        (0453)     adc  A,0
                                        (0454)     jmp  IDataLoop
                                        (0455) 
                                        (0456) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0457) 
                                        (0458) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0459)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0460)                                        ; to use the Virtual Register page.
                                        (0461) 
                                        (0462)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0463)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0464)     ; text segment and may have been relocated by the Code Compressor.
                                        (0465)     ;
00BD: 50 03    MOV   A,0x3              (0466)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 19    MOV   X,0x19             (0467)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0468)     push  A
00C2: 28       ROMX                     (0469)     romx                               ; get the MSB of xidata's address
00C3: 53 01    MOV   [__r0],A           (0470)     mov   [__r0], A
00C5: 18       POP   A                  (0471)     pop   A
00C6: 75       INC   X                  (0472)     inc   X
00C7: 09 00    ADC   A,0x0              (0473)     adc   A, 0
00C9: 28       ROMX                     (0474)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0475)     swap  A, X
00CB: 51 01    MOV   A,[__r0]           (0476)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0477)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0478)     jmp   .AccessStruct
                                        (0479) 
                                        (0480)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0481)     ; values of C variables. Each structure contains 3 member elements.
                                        (0482)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0483)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0484)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0485)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0486)     ; value in the second member element, an unsigned byte:
                                        (0487)     ; (1) If the value of the second element is non-zero, it represents
                                        (0488)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0489)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0490)     ; the bytes are copied to the block of RAM.
                                        (0491)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0492)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0493)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0494) 
                                        (0495) .AccessNextStructLoop:
00CF: 75       INC   X                  (0496)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0497)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0498) .AccessStruct:                         ; Entry point for first block
                                        (0499)     ;
                                        (0500)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0501)     ;
                                        (0502)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0503)     push  A
00D6: 28       ROMX                     (0504)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0505)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0506)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0507)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0508)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0509)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0510)     adc   A, 0
00E0: 08       PUSH  A                  (0511)     push  A
00E1: 28       ROMX                     (0512)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 01    MOV   [__r0],A           (0513)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0514)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0515)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0516)     adc   A, 0
00E8: 08       PUSH  A                  (0517)     push  A
00E9: 28       ROMX                     (0518)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0519)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 00    MOV   [__r1],A           (0520)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0521)     pop   A                            ; restore pXIData to [A,X]
                                        (0522) 
                                        (0523) .CopyNextByteLoop:
                                        (0524)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0525)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0526)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0527)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0528)     ;
00EF: 75       INC   X                  (0529)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0530)     adc   A, 0
00F2: 08       PUSH  A                  (0531)     push  A
00F3: 28       ROMX                     (0532)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 01    MVI   [__r0],A           (0533)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 01 FF TST   [__r0],0xFF        (0534)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0535)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0536)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0537)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0538)     mov   reg[ MVW_PP], A
                                        (0539) .CopyLoopTail:
0100: 18       POP   A                  (0540)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 00    DEC   [__r1]             (0541)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0542)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0543)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0544) 
                                        (0545) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0546)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0548)     adc   A, 0
010B: 08       PUSH  A                  (0549)     push  A
010C: 28       ROMX                     (0550)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 00    MOV   [__r1],A           (0551)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0552)     mov   A, 0                         ; Initialize source data
                                        (0553) 
                                        (0554) .ClearRAMBlockLoop:
                                        (0555)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0556)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0557)     ;
0111: 3F 01    MVI   [__r0],A           (0558)     mvi   [__r0], A                    ; Clear a byte
0113: 47 01 FF TST   [__r0],0xFF        (0559)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0560)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0561)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0562)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0563)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0564)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0565) .ClearLoopTail:
011F: 7A 00    DEC   [__r1]             (0566)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0567)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0568)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0569)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0570) 
                                        (0571) .C_RTE_WrapUp:
0126: 18       POP   A                  (0572)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
0129: 70 EF    AND   F,0xEF             
                                        (0573) 
                                        (0574) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0575) 
                                        (0576) C_RTE_Done:
                                        (0577) 
                                        (0578) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0579) 
                                        (0580)     ;-------------------------------
                                        (0581)     ; Voltage Stabilization for SMP
                                        (0582)     ;-------------------------------
                                        (0583) 
                                        (0584) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0585) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0586)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0587)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0588)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0589)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0590)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0591)     M8C_SetBank1
                                        (0592)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0593)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0594)     M8C_SetBank0
                                        (0595)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0596)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0597) .WaitFor2ms:
                                        (0598)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0599)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0600) ENDIF ; SMP is operational
                                        (0601) ENDIF ; 5.0V Operation
                                        (0602) 
                                        (0603)     ;-------------------------------
                                        (0604)     ; Set Power-On Reset (POR) Level
                                        (0605)     ;-------------------------------
                                        (0606) 
                                        (0607)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0608)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0609)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. These
                                        (0610)     ;  values should not be changed from the settings here. Failure to follow this instruction could 
                                        (0611)     ;  lead to corruption of PSoC flash.
                                        (0612) 
                                        (0613)     M8C_SetBank1
                                        (0614) 
                                        (0615) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0616)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0617)  ELSE                                       ;    No, fast mode
                                        (0618)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0619)                                             ;       no, set midpoint POR in user code, if desired
                                        (0620)   ELSE ; 24HMz                              ;
                                        (0621)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0622)   ENDIF ; 24MHz
                                        (0623)  ENDIF ; Slow Mode
                                        (0624) ENDIF ; 5.0V Operation
                                        (0625) 
                                        (0626)     M8C_SetBank0
                                        (0627) 
                                        (0628)     ;----------------------------
                                        (0629)     ; Wrap up and invoke "main"
                                        (0630)     ;----------------------------
                                        (0631) 
                                        (0632)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0633)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0634)     ;
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0635)     mov  reg[INT_MSK0],0
012E: 71 10    OR    F,0x10             
                                        (0636) 
                                        (0637)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0638)     ; And put decimator in full mode so it does not consume too much current.
                                        (0639)     ;
                                        (0640)     M8C_SetBank1
0130: 62 E0 00 MOV   REG[0xE0],0x0      (0641)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0133: 43 E7 80 OR    REG[0xE7],0x80     (0642)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0136: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0646)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0647)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0648)     ;
0138: 62 E2 00 MOV   REG[0xE2],0x0      (0649)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0650)                                    ; have been set during the boot process.
                                        (0651) IF	(TOOLCHAIN & HITECH)
                                        (0652) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0653) ELSE
                                        (0654) IF ENABLE_LJMP_TO_MAIN
                                        (0655)     ljmp  _main                    ; goto main (no return)
                                        (0656) ELSE
013B: 7C 03 7D LCALL _main|__text_start|_main(0657)     lcall _main                    ; call main
                                        (0658) .Exit:
013E: 8F FF    JMP   0x013E             (0659)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0660) ENDIF
                                        (0661) ENDIF ; TOOLCHAIN
                                        (0662) 
                                        (0663)     ;---------------------------------
                                        (0664)     ; Library Access to Global Parms
                                        (0665)     ;---------------------------------
                                        (0666)     ;
                                        (0667)  bGetPowerSetting:
                                        (0668) _bGetPowerSetting:
                                        (0669)     ; Returns value of POWER_SETTING in the A register.
                                        (0670)     ; No inputs. No Side Effects.
                                        (0671)     ;
0140: 50 10    MOV   A,0x10             (0672)     mov   A, POWER_SETTING
0142: 7F       RET                      (0673)     ret
                                        (0674) 
                                        (0675) IF	(TOOLCHAIN & HITECH)
                                        (0676) ELSE
                                        (0677)     ;---------------------------------
                                        (0678)     ; Order Critical RAM & ROM AREAs
                                        (0679)     ;---------------------------------
                                        (0680)     ;  'TOP' is all that has been defined so far...
                                        (0681) 
                                        (0682)     ;  ROM AREAs for C CONST, static & global items
                                        (0683)     ;
                                        (0684)     AREA lit               (ROM, REL, CON)   ; 'const' definitions
                                        (0685)     AREA idata             (ROM, REL, CON)   ; Constants for initializing RAM
                                        (0686) __idata_start:
                                        (0687) 
                                        (0688)     AREA func_lit          (ROM, REL, CON)   ; Function Pointers
                                        (0689) __func_lit_start:
                                        (0690) 
                                        (0691) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0692)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0693)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0694)     ; relocated by the code compressor, but the text area may shrink and
                                        (0695)     ; that moves xidata around.
                                        (0696)     ;
                                        (0697) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0698) ENDIF
                                        (0699) 
                                        (0700)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0701)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0702) 
                                        (0703)     ; CODE segment for general use
                                        (0704)     ;
                                        (0705)     AREA text (ROM, REL, CON)
                                        (0706) __text_start:
                                        (0707) 
                                        (0708)     ; RAM area usage
                                        (0709)     ;
                                        (0710)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0711) __data_start:
                                        (0712) 
                                        (0713)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0714)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0715)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0716) __bss_start:
                                        (0717) 
                                        (0718) ENDIF ; TOOLCHAIN
                                        (0719) 
                                        (0720) ; end of file boot.asm
    0143: 30       HALT  
    0144: 30       HALT  
    0145: 30       HALT  
    0146: 30       HALT  
    0147: 30       HALT  
    0148: 30       HALT  
    0149: 30       HALT  
    014A: 30       HALT  
    014B: 30       HALT  
    014C: 30       HALT  
    014D: 30       HALT  
    014E: 30       HALT  
    014F: 30       HALT  
    0150: 30       HALT  
    0151: 30       HALT  
    0152: 30       HALT  
    0153: 30       HALT  
    0154: 30       HALT  
    0155: 30       HALT  
    0156: 30       HALT  
    0157: 30       HALT  
    0158: 30       HALT  
    0159: 30       HALT  
    015A: 30       HALT  
    015B: 30       HALT  
    015C: 30       HALT  
    015D: 30       HALT  
    015E: 30       HALT  
    015F: 30       HALT  
    0160: 30       HALT  
    0161: 30       HALT  
    0162: 30       HALT  
    0163: 30       HALT  
    0164: 30       HALT  
    0165: 30       HALT  
    0166: 30       HALT  
    0167: 30       HALT  
    0168: 30       HALT  
    0169: 30       HALT  
    016A: 30       HALT  
    016B: 30       HALT  
    016C: 30       HALT  
    016D: 30       HALT  
    016E: 30       HALT  
    016F: 30       HALT  
    0170: 30       HALT  
    0171: 30       HALT  
    0172: 30       HALT  
    0173: 30       HALT  
    0174: 30       HALT  
    0175: 30       HALT  
    0176: 30       HALT  
    0177: 30       HALT  
    0178: 30       HALT  
    0179: 30       HALT  
    017A: 30       HALT  
    017B: 30       HALT  
    017C: 30       HALT  
    017D: 30       HALT  
    017E: 30       HALT  
    017F: 30       HALT  
    0180: 30       HALT  
    0181: 30       HALT  
    0182: 30       HALT  
    0183: 30       HALT  
    0184: 30       HALT  
    0185: 30       HALT  
    0186: 30       HALT  
    0187: 30       HALT  
    0188: 30       HALT  
    0189: 30       HALT  
    018A: 30       HALT  
    018B: 30       HALT  
    018C: 30       HALT  
    018D: 30       HALT  
    018E: 30       HALT  
    018F: 30       HALT  
    0190: 30       HALT  
    0191: 30       HALT  
    0192: 30       HALT  
    0193: 30       HALT  
    0194: 30       HALT  
    0195: 30       HALT  
    0196: 30       HALT  
    0197: 30       HALT  
    0198: 30       HALT  
    0199: 30       HALT  
    019A: 30       HALT  
    019B: 30       HALT  
    019C: 30       HALT  
    019D: 30       HALT  
    019E: 30       HALT  
    019F: 30       HALT  
    01A0: 60 28    MOV   REG[0x28],A
    01A2: 66 00    ASL   [X+0]
    01A4: 63 05 65 MOV   REG[X+0x5],0x65
    01A7: 00       SWI   
    01A8: E6 00    JACC  0x07A9
    01AA: E7 00    JACC  0x08AB
FILE: lib\psocconfigtbl.asm             (0001) ; Generated by PSoC Designer 5.1.1875.0
0214: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_lab1c_Bank1
                                        (0006) export LoadConfigTBL_lab1c_Bank0
                                        (0007) export LoadConfigTBL_lab1c_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_lab1c_Bank0:
                                        (0010) ;  Global Register values Bank 0
                                        (0011) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0012) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0013) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0014) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0015) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0016) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0017) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0018) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0019) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0020) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0021) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0022) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0023) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0024) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0025) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0026) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0027) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0028) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0029) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0030) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0031) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0032) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0033) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0034) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0035) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0036) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0037) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0038) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0039) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0040) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0041) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0042) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0043) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0044) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0045) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0046) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0047) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0048) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0049) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0050) 	db		ffh
                                        (0051) LoadConfigTBL_lab1c_Bank1:
                                        (0052) ;  Global Register values Bank 1
                                        (0053) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0054) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0055) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0056) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0057) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0058) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0059) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0060) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0061) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0062) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0063) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0064) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0065) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0066) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0067) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0068) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0069) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0070) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0071) 	db		ffh
                                        (0072) LoadConfigTBL_lab1c_Ordered:
                                        (0073) ;  Ordered Global Register values
                                        (0074) 	M8C_SetBank0
0216: 62 00 00 MOV   REG[0x0],0x0       (0075) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0219: 71 10    OR    F,0x10             
                                        (0076) 	M8C_SetBank1
021B: 62 00 00 MOV   REG[0x0],0x0       (0077) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
021E: 62 01 FF MOV   REG[0x1],0xFF      (0078) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
0221: 70 EF    AND   F,0xEF             
                                        (0079) 	M8C_SetBank0
0223: 62 03 FF MOV   REG[0x3],0xFF      (0080) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
0226: 62 02 00 MOV   REG[0x2],0x0       (0081) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0229: 71 10    OR    F,0x10             
                                        (0082) 	M8C_SetBank1
022B: 62 02 00 MOV   REG[0x2],0x0       (0083) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
022E: 62 03 00 MOV   REG[0x3],0x0       (0084) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0231: 70 EF    AND   F,0xEF             
                                        (0085) 	M8C_SetBank0
0233: 62 01 00 MOV   REG[0x1],0x0       (0086) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0236: 62 04 00 MOV   REG[0x4],0x0       (0087) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0239: 71 10    OR    F,0x10             
                                        (0088) 	M8C_SetBank1
023B: 62 04 1E MOV   REG[0x4],0x1E      (0089) 	mov	reg[04h], 1eh		; Port_1_DriveMode_0 register (PRT1DM0)
023E: 62 05 E0 MOV   REG[0x5],0xE0      (0090) 	mov	reg[05h], e0h		; Port_1_DriveMode_1 register (PRT1DM1)
0241: 70 EF    AND   F,0xEF             
                                        (0091) 	M8C_SetBank0
0243: 62 07 E0 MOV   REG[0x7],0xE0      (0092) 	mov	reg[07h], e0h		; Port_1_DriveMode_2 register (PRT1DM2)
0246: 62 06 00 MOV   REG[0x6],0x0       (0093) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0249: 71 10    OR    F,0x10             
                                        (0094) 	M8C_SetBank1
024B: 62 06 00 MOV   REG[0x6],0x0       (0095) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
024E: 62 07 00 MOV   REG[0x7],0x0       (0096) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0251: 70 EF    AND   F,0xEF             
                                        (0097) 	M8C_SetBank0
0253: 62 05 00 MOV   REG[0x5],0x0       (0098) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0256: 62 08 00 MOV   REG[0x8],0x0       (0099) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0259: 71 10    OR    F,0x10             
                                        (0100) 	M8C_SetBank1
025B: 62 08 00 MOV   REG[0x8],0x0       (0101) 	mov	reg[08h], 00h		; Port_2_DriveMode_0 register (PRT2DM0)
025E: 62 09 FF MOV   REG[0x9],0xFF      (0102) 	mov	reg[09h], ffh		; Port_2_DriveMode_1 register (PRT2DM1)
0261: 70 EF    AND   F,0xEF             
                                        (0103) 	M8C_SetBank0
0263: 62 0B FF MOV   REG[0xB],0xFF      (0104) 	mov	reg[0bh], ffh		; Port_2_DriveMode_2 register (PRT2DM2)
0266: 62 0A 00 MOV   REG[0xA],0x0       (0105) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0269: 71 10    OR    F,0x10             
                                        (0106) 	M8C_SetBank1
026B: 62 0A 00 MOV   REG[0xA],0x0       (0107) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
026E: 62 0B 00 MOV   REG[0xB],0x0       (0108) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0271: 70 EF    AND   F,0xEF             
                                        (0109) 	M8C_SetBank0
0273: 62 09 00 MOV   REG[0x9],0x0       (0110) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0276: 62 0C 00 MOV   REG[0xC],0x0       (0111) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0279: 71 10    OR    F,0x10             
                                        (0112) 	M8C_SetBank1
027B: 62 0C 00 MOV   REG[0xC],0x0       (0113) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
027E: 62 0D 00 MOV   REG[0xD],0x0       (0114) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0281: 70 EF    AND   F,0xEF             
                                        (0115) 	M8C_SetBank0
0283: 62 0F 00 MOV   REG[0xF],0x0       (0116) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0286: 62 0E 00 MOV   REG[0xE],0x0       (0117) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0289: 71 10    OR    F,0x10             
                                        (0118) 	M8C_SetBank1
028B: 62 0E 00 MOV   REG[0xE],0x0       (0119) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
028E: 62 0F 00 MOV   REG[0xF],0x0       (0120) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0291: 70 EF    AND   F,0xEF             
                                        (0121) 	M8C_SetBank0
0293: 62 0D 00 MOV   REG[0xD],0x0       (0122) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0296: 62 10 00 MOV   REG[0x10],0x0      (0123) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0299: 71 10    OR    F,0x10             
                                        (0124) 	M8C_SetBank1
029B: 62 10 00 MOV   REG[0x10],0x0      (0125) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
029E: 62 11 00 MOV   REG[0x11],0x0      (0126) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
02A1: 70 EF    AND   F,0xEF             
                                        (0127) 	M8C_SetBank0
02A3: 62 13 00 MOV   REG[0x13],0x0      (0128) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
02A6: 62 12 00 MOV   REG[0x12],0x0      (0129) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
02A9: 71 10    OR    F,0x10             
                                        (0130) 	M8C_SetBank1
02AB: 62 12 00 MOV   REG[0x12],0x0      (0131) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02AE: 62 13 00 MOV   REG[0x13],0x0      (0132) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02B1: 70 EF    AND   F,0xEF             
                                        (0133) 	M8C_SetBank0
02B3: 62 11 00 MOV   REG[0x11],0x0      (0134) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02B6: 62 14 00 MOV   REG[0x14],0x0      (0135) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
02B9: 71 10    OR    F,0x10             
                                        (0136) 	M8C_SetBank1
02BB: 62 14 00 MOV   REG[0x14],0x0      (0137) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02BE: 62 15 00 MOV   REG[0x15],0x0      (0138) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
02C1: 70 EF    AND   F,0xEF             
                                        (0139) 	M8C_SetBank0
02C3: 62 17 00 MOV   REG[0x17],0x0      (0140) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
02C6: 62 16 00 MOV   REG[0x16],0x0      (0141) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02C9: 71 10    OR    F,0x10             
                                        (0142) 	M8C_SetBank1
02CB: 62 16 00 MOV   REG[0x16],0x0      (0143) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02CE: 62 17 00 MOV   REG[0x17],0x0      (0144) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02D1: 70 EF    AND   F,0xEF             
                                        (0145) 	M8C_SetBank0
02D3: 62 15 00 MOV   REG[0x15],0x0      (0146) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02D6: 62 18 00 MOV   REG[0x18],0x0      (0147) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
02D9: 71 10    OR    F,0x10             
                                        (0148) 	M8C_SetBank1
02DB: 62 18 00 MOV   REG[0x18],0x0      (0149) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
02DE: 62 19 00 MOV   REG[0x19],0x0      (0150) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
02E1: 70 EF    AND   F,0xEF             
                                        (0151) 	M8C_SetBank0
02E3: 62 1B 00 MOV   REG[0x1B],0x0      (0152) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
02E6: 62 1A 00 MOV   REG[0x1A],0x0      (0153) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
02E9: 71 10    OR    F,0x10             
                                        (0154) 	M8C_SetBank1
02EB: 62 1A 00 MOV   REG[0x1A],0x0      (0155) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
02EE: 62 1B 00 MOV   REG[0x1B],0x0      (0156) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
02F1: 70 EF    AND   F,0xEF             
                                        (0157) 	M8C_SetBank0
02F3: 62 19 00 MOV   REG[0x19],0x0      (0158) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
02F6: 62 1C 00 MOV   REG[0x1C],0x0      (0159) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
02F9: 71 10    OR    F,0x10             
                                        (0160) 	M8C_SetBank1
02FB: 62 1C 00 MOV   REG[0x1C],0x0      (0161) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
02FE: 62 1D 00 MOV   REG[0x1D],0x0      (0162) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0301: 70 EF    AND   F,0xEF             
                                        (0163) 	M8C_SetBank0
0303: 62 1F 00 MOV   REG[0x1F],0x0      (0164) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0306: 62 1E 00 MOV   REG[0x1E],0x0      (0165) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0309: 71 10    OR    F,0x10             
                                        (0166) 	M8C_SetBank1
030B: 62 1E 00 MOV   REG[0x1E],0x0      (0167) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
030E: 62 1F 00 MOV   REG[0x1F],0x0      (0168) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0311: 70 EF    AND   F,0xEF             
                                        (0169) 	M8C_SetBank0
0313: 62 1D 00 MOV   REG[0x1D],0x0      (0170) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0316: 70 EF    AND   F,0xEF             
                                        (0171) 	M8C_SetBank0
0318: 7F       RET                      (0172) 	ret
                                        (0173) 
                                        (0174) 
                                        (0175) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ; Generated by PSoC Designer 5.1.1875.0
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2010. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_lab1c
                                        (0026) export _LoadConfig_lab1c
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     
031B: 7C 03 22 LCALL 0x0322             (0058) 	lcall	LoadConfig_lab1c
031E: 7C 02 14 LCALL 0x0214             (0059) 	lcall	LoadConfigTBL_lab1c_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
0321: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration lab1c
                                        (0067) ;
                                        (0068) ;    Load configuration registers for lab1c.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_lab1c:
                                        (0085)  LoadConfig_lab1c:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
0322: 10       PUSH  X                  (0088) 	push	x
0323: 70 EF    AND   F,0xEF             
                                        (0089)     M8C_SetBank0                    ; Force bank 0
0325: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
0327: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
0328: 50 01    MOV   A,0x1              (0093)     mov     A, >LoadConfigTBL_lab1c_Bank0
032A: 57 A0    MOV   X,0xA0             (0094)     mov     X, <LoadConfigTBL_lab1c_Bank0
032C: 7C 03 3D LCALL 0x033D             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
032F: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
0331: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
0332: 50 01    MOV   A,0x1              (0100)     mov     A, >LoadConfigTBL_lab1c_Bank1
0334: 57 EF    MOV   X,0xEF             (0101)     mov     X, <LoadConfigTBL_lab1c_Bank1
0336: 7C 03 3D LCALL 0x033D             (0102)     lcall   LoadConfig              ; Load the bank 1 values
0339: 70 EF    AND   F,0xEF             
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
033B: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
033C: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
033D: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
033F: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
0340: 08       PUSH  A                  (0132)     push    A
0341: 4F       MOV   X,SP               (0133)     mov     X, SP
0342: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
0345: D0 04    JNC   0x034A             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0347: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
034A: 18       POP   A                  (0138)     pop     A
034B: 20       POP   X                  (0139)     pop     X
034C: 70 EF    AND   F,0xEF             
034E: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0140) 
                                        (0141) LoadConfigLp:
                                        (0142)     M8C_SetBank0                    ; Switch to bank 0
                                        (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0351: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
0352: 08       PUSH  A                  (0145)     push    A
0353: 28       ROMX                     (0146)     romx                            ; Load register address from table
0354: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
0356: A0 1F    JZ    0x0376             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
0358: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
0359: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
035C: A0 03    JZ    0x0360             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
035E: 71 10    OR    F,0x10             
                                        (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
0360: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
0362: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
0363: 20       POP   X                  (0156)     pop     X
0364: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
0365: 09 00    ADC   A,0x0              (0158)     adc     A, 0
0367: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
0368: 08       PUSH  A                  (0160)     push    A
0369: 28       ROMX                     (0161)     romx                            ; load config data from the table
036A: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
036B: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
036D: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
036F: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
0370: 20       POP   X                  (0166)     pop     X
0371: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
0372: 09 00    ADC   A,0x0              (0168)     adc     A, 0
0374: 8F D7    JMP   0x034C             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
0376: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
0378: 70 3F    AND   F,0x3F             
037A: 71 C0    OR    F,0xC0             
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
037C: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175) AREA InterruptRAM(ram, rel)
                                        (0176) 
                                        (0177) NO_SHADOW:
                                        (0178) _NO_SHADOW:
FILE: Z:\LAB1C(~1\Lab1C\Lab1C\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) 
(0008) 
(0009) void main(void)
(0010) {
_main|__text_start|_main:
  bShadow              --> X+2
  bSwitchBefore        --> X+1
  bSwitch              --> X+0
    037D: 10       PUSH  X
    037E: 4F       MOV   X,SP
    037F: 38 03    ADD   SP,0x3
(0011) 	/* With Debounce
(0012) 	int bShadow, bTemp2, bTemp1, bTemp0, bSwitchOn;
(0013) 	bShadow=0;
(0014) 	bTemp1=0;
(0015) 	bTemp2=0;
(0016) 	bTemp0=0;
(0017) 	bSwitchOn=0;
(0018) 	PRT1DR=0;
(0019) 	while(1)
(0020) 	{
(0021) 		bTemp2=bTemp1;	
(0022) 		bTemp1=bTemp0;
(0023) 		bTemp0= (PRT1DR & 0x01);
(0024) 		
(0025) 		if(bTemp0 == 0 && bTemp1 ==0 && bTemp2 ==0)
(0026) 		{
(0027) 		// yes
(0028) 			bSwitchOn = 0;
(0029) 		}
(0030) 		else
(0031) 		{
(0032) 		//no
(0033) 			if(bSwitchOn ==1)
(0034) 			{
(0035) 			//yes
(0036) 				//do nothing
(0037) 			}
(0038) 			else
(0039) 			{
(0040) 			//no
(0041) 				//Swtich just on
(0042) 				bSwitchOn = 1;
(0043) 				
(0044) 				//Increment leds
(0045) 				bShadow = bShadow + 2;
(0046) 				PRT1DR = (bShadow & 0x1e);
(0047) 			}
(0048) 		}
(0049) 	}//end while
(0050) 	*/
(0051) 	
(0052) 	
(0053) 	
(0054) 	//Without Debounce
(0055) 	unsigned char bShadow, bSwitch, bSwitchBefore;
(0056) 	bShadow=0;
    0381: 56 02 00 MOV   [X+2],0x0
(0057) 	bSwitchBefore=0;
    0384: 56 01 00 MOV   [X+1],0x0
(0058) 	bSwitch = 0;
    0387: 56 00 00 MOV   [X+0],0x0
(0059) 	PRT1DR=0;
    038A: 62 04 00 MOV   REG[0x4],0x0
    038D: 80 21    JMP   0x03AF
(0060) 	while(1)
(0061) 	{
(0062) 		//Pressed =1, not pressed = 0
(0063) 		bSwitch = (PRT1DR & 0x01);
    038F: 5D 04    MOV   A,REG[0x4]
    0391: 62 D0 00 MOV   REG[0xD0],0x0
    0394: 21 01    AND   A,0x1
    0396: 54 00    MOV   [X+0],A
(0064) 		
(0065) 		if(bSwitchBefore == 0 && bSwitch ==1)
    0398: 3D 01 00 CMP   [X+1],0x0
    039B: B0 0F    JNZ   0x03AB
    039D: 3D 00 01 CMP   [X+0],0x1
    03A0: B0 0A    JNZ   0x03AB
(0066) 		{
(0067) 			//Swtich just turned on
(0068) 			
(0069) 			//Increment leds
(0070) 			bShadow = bShadow + 2;
    03A2: 07 02 02 ADD   [X+2],0x2
(0071) 			PRT1DR = (bShadow & 0x1e);
    03A5: 52 02    MOV   A,[X+2]
    03A7: 21 1E    AND   A,0x1E
    03A9: 60 04    MOV   REG[0x4],A
(0072) 		}
(0073) 		
(0074) 		//record previous switch state
(0075) 		bSwitchBefore = bSwitch;
    03AB: 52 00    MOV   A,[X+0]
    03AD: 54 01    MOV   [X+1],A
(0076) 	}//end while
    03AF: 8F DF    JMP   0x038F
(0077) 	
(0078) }
    03B1: 38 FD    ADD   SP,0xFD
    03B3: 20       POP   X
    03B4: 8F FF    JMP   0x03B4
--------------------------------------------------------------------------------


PSoC Designer Version: 5.0.985.0

Copyright (C) 1994 - 2010 ImageCraft Creations Inc.
ImageCraft, 2625 Middlefield Rd #685, Palo Alto, CA 94306
info@imagecraft.com, phone (650) 493-9326 FAX (866) 889-4834
http://www.imagecraft.com
lcc source code (C) 1995, by David R. Hanson and AT&T. Reproduced by permission.
Release version 7.04
